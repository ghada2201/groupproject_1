/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package groupproject;

import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import javax.crypto.*;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.PBEParameterSpec;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;
import javax.swing.JFrame;
/**
 *
 * @author asma.
 */
public class SignUpIn extends javax.swing.JFrame {
 /**
     * Creates new form SignUpIn
     */
    
     public String salt;
     //generated
     public String mySecurePassword;
     //
     public String mypassword;
     public String by;
     
    public SignUpIn() {
    
        this.salt = SignUpIn.getSalt(30);
        initComponents();
     
    }

    
      public JTextField getEmail() {
       return EmailLTextField; 
    }
     
    public String getEmailL() {
       return s; 
    }
    
     
    LocalDate LocalD = LocalDate.now();
    int min = 1000;
    int max = 5000;
    int randomID = (int)Math.floor(Math.random()*(max-min+1)+min);
    LocalTime logInTime = LocalTime.now();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        SignupPanel = new javax.swing.JPanel();
        UserN = new javax.swing.JLabel();
        UserNameTextField = new javax.swing.JTextField();
        UEmail = new javax.swing.JLabel();
        EmailSTextField = new javax.swing.JTextField();
        UPassword = new javax.swing.JLabel();
        PasswordSTextField = new javax.swing.JPasswordField();
        MemorableW = new javax.swing.JLabel();
        MemorableWordTextField = new javax.swing.JTextField();
        SignUpButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        Clear = new javax.swing.JButton();
        user = new javax.swing.JLabel();
        usertype = new javax.swing.JComboBox<>();
        SigninPanel = new javax.swing.JPanel();
        EmailLogi = new javax.swing.JLabel();
        EmailLTextField = new javax.swing.JTextField();
        PasswordLogi = new javax.swing.JLabel();
        PaswordLoginTextField = new javax.swing.JPasswordField();
        LoginButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ForgotPass = new javax.swing.JButton();
        ClearLogin = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(249, 249, 249));

        SignupPanel.setBackground(new java.awt.Color(247, 247, 247));
        SignupPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        UserN.setText("Username");

        UserNameTextField.setBackground(new java.awt.Color(247, 247, 247));
        UserNameTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        UserNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserNameTextFieldActionPerformed(evt);
            }
        });

        UEmail.setText("Email");

        EmailSTextField.setBackground(new java.awt.Color(247, 247, 247));
        EmailSTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        EmailSTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmailSTextFieldActionPerformed(evt);
            }
        });

        UPassword.setText("Password");

        PasswordSTextField.setBackground(new java.awt.Color(247, 247, 247));
        PasswordSTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        PasswordSTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordSTextFieldActionPerformed(evt);
            }
        });

        MemorableW.setText("Memorable Word");

        MemorableWordTextField.setBackground(new java.awt.Color(247, 247, 247));
        MemorableWordTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        MemorableWordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MemorableWordTextFieldActionPerformed(evt);
            }
        });

        SignUpButton.setBackground(new java.awt.Color(0, 153, 255));
        SignUpButton.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        SignUpButton.setText("Sign Up");
        SignUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignUpButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel5.setText("Signup");

        Clear.setBackground(new java.awt.Color(0, 153, 255));
        Clear.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        user.setText("User Type");
        user.setToolTipText("");

        usertype.setBackground(new java.awt.Color(0, 153, 255));
        usertype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin ", "User", " ", " " }));
        usertype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usertypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SignupPanelLayout = new javax.swing.GroupLayout(SignupPanel);
        SignupPanel.setLayout(SignupPanelLayout);
        SignupPanelLayout.setHorizontalGroup(
            SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SignupPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SignupPanelLayout.createSequentialGroup()
                        .addComponent(SignUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addGroup(SignupPanelLayout.createSequentialGroup()
                        .addGroup(SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(SignupPanelLayout.createSequentialGroup()
                                .addGroup(SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(UserN, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(UEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(UPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MemorableW))
                                .addGap(17, 17, 17)
                                .addGroup(SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PasswordSTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MemorableWordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EmailSTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(UserNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(usertype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(152, Short.MAX_VALUE))))
        );
        SignupPanelLayout.setVerticalGroup(
            SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SignupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SignupPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(31, 31, 31)
                        .addComponent(UserN, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(UserNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UEmail)
                    .addComponent(EmailSTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(UPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PasswordSTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(MemorableW, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MemorableWordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usertype, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(SignupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Clear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SignUpButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        SigninPanel.setBackground(new java.awt.Color(247, 247, 247));
        SigninPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        EmailLogi.setText("Email");

        EmailLTextField.setBackground(new java.awt.Color(247, 247, 247));
        EmailLTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        EmailLTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmailLTextFieldActionPerformed(evt);
            }
        });

        PasswordLogi.setText("Password");

        PaswordLoginTextField.setBackground(new java.awt.Color(247, 247, 247));
        PaswordLoginTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        PaswordLoginTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaswordLoginTextFieldActionPerformed(evt);
            }
        });

        LoginButton.setBackground(new java.awt.Color(0, 153, 255));
        LoginButton.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        LoginButton.setText("Log In");
        LoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setText("Login");

        ForgotPass.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        ForgotPass.setText("Forgot Password");
        ForgotPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForgotPassActionPerformed(evt);
            }
        });

        ClearLogin.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        ClearLogin.setText("clear");
        ClearLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SigninPanelLayout = new javax.swing.GroupLayout(SigninPanel);
        SigninPanel.setLayout(SigninPanelLayout);
        SigninPanelLayout.setHorizontalGroup(
            SigninPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SigninPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SigninPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SigninPanelLayout.createSequentialGroup()
                        .addComponent(LoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ClearLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ForgotPass, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SigninPanelLayout.createSequentialGroup()
                        .addGroup(SigninPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(SigninPanelLayout.createSequentialGroup()
                                .addGroup(SigninPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(SigninPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SigninPanelLayout.createSequentialGroup()
                                        .addComponent(EmailLogi, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(71, 71, 71)))
                                .addComponent(EmailLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SigninPanelLayout.createSequentialGroup()
                                .addComponent(PasswordLogi, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PaswordLoginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SigninPanelLayout.setVerticalGroup(
            SigninPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SigninPanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(SigninPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EmailLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EmailLogi, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(SigninPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordLogi, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PaswordLoginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(SigninPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ForgotPass, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClearLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/groupproject/logo.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(SigninPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addComponent(SignupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SigninPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SignupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   public String s;
  // s= EmailL.getText();
   
    
   
    private static final Random RANDOM = new SecureRandom();
    private static final String ALPHABET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    private static final int ITERATIONS = 10000;
    private static final int KEY_LENGTH = 256;
    
    public static String getSalt(int length) {
        StringBuilder returnValue = new StringBuilder(length);

        for (int i = 0; i < length; i++) {
            returnValue.append(ALPHABET.charAt(RANDOM.nextInt(ALPHABET.length())));
        }

        return new String(returnValue);
    }

    public static byte[] hash(char[] password, byte[] salt) {
        PBEKeySpec spec = new PBEKeySpec(password, salt, ITERATIONS, KEY_LENGTH);
        Arrays.fill(password, Character.MIN_VALUE);
        try {
            SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            return skf.generateSecret(spec).getEncoded();
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new AssertionError("Error while hashing a password: " + e.getMessage(), e);
        } finally {
            spec.clearPassword();
        }
    }

    public static String generateSecurePassword(String password, String salt) {
        String returnValue = null;

        byte[] securePassword = hash(password.toCharArray(), salt.getBytes());
 
        returnValue = Base64.getEncoder().encodeToString(securePassword);
 
        return returnValue;
    }
    
    
    public  void ProtectUserPassword(){
        SignUpIn n = new SignUpIn();
         String myPassword = PasswordSTextField.getText();
        
        // Generate Salt. The generated value can be stored in DB. 
        String salt = n.getSalt(30);
        
        // Protect user's password. The generated value can be stored in DB.
        String mySecurePassword = n.generateSecurePassword(myPassword, salt);
        
    }
    
    
    
    
    
    public static boolean verifyUserPassword(String providedPassword,String securedPassword, String salt)
    {
        boolean returnValue = false;
        
        // Generate New secure password with the same salt
        String newSecurePassword = generateSecurePassword(providedPassword, salt);
        
        // Check if two passwords are equal
        returnValue = newSecurePassword.equalsIgnoreCase(securedPassword);
        
        return returnValue;
    }

    private void UserNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UserNameTextFieldActionPerformed

    
    
    /*---------------------------*/
    private void SignUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignUpButtonActionPerformed
        try {
            // Class.forName("com.mysql.jdbc.Driver");
            
            Connection cn = null;
            PreparedStatement st = null;
            ResultSet rs = null;
            
            
            //Get the username and password
            String Name =       UserNameTextField.getText();
            String Email =      EmailSTextField.getText();
            String Password =   PasswordSTextField.getText();
            String  Memorable = MemorableWordTextField.getText();
            
            String l = usertype.getSelectedItem().toString();
            SignUpIn n = new SignUpIn();
            
            String mySecurePassword = n.generateSecurePassword(PasswordSTextField.getText(), salt);
            
            ResultSet userResultSet = UserTable.get(Email);
          
            if (userResultSet.next())
            {
                JOptionPane.showMessageDialog(this,"User with this Email is already registered");
                return;
            }
            
            if(verifySignupFields()==true)
            {
                UserTable.insertSalt(Name, Email, l,Memorable, mySecurePassword,salt);
                UserTable.insertUserSignUppActivity(Name,Email, LocalD, randomID);
                
                
                JOptionPane.showMessageDialog(this, "You have been registered");
                //st.executeUpdate();
                 UserNameTextField.setText(" ");
                 EmailSTextField.setText(" ");
                 PasswordSTextField.setText("");
                 MemorableWordTextField.setText(" ");
             
                
            }
            else{
                JOptionPane.showMessageDialog(this, "Retry!!!");   
            }
        } catch (SQLException ex) {
            Logger.getLogger(SignUpIn.class.getName()).log(Level.SEVERE, null, ex);
        }
   
               
    }//GEN-LAST:event_SignUpButtonActionPerformed

    
    
     private boolean verifySignupFields()
    {
            String name = UserNameTextField.getText();
            String email = EmailSTextField.getText();
            String password = PasswordSTextField.getText();
            String  Memorable = MemorableWordTextField.getText();
            String l = usertype.getSelectedItem().toString();

        //Check if fields are empty fields
        if((name.equals("")||email.equals("")||password.equals("") || l.equals("")))
         
        {
            JOptionPane.showMessageDialog(this, "Mandatory fields are empty Empty Fields");
            return false;
        }
        //Check if fields are apropriate
             String emailRegex = "^(.+)@(.+)$";
            if (!email.matches(emailRegex)) {
                JOptionPane.showMessageDialog(this,"Email is not in a valid format");
                return false;
            }
        else
        {
            return true;
        }
    }
    
    private void EmailLTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmailLTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EmailLTextFieldActionPerformed

      private boolean verifyLoginFields()
    {
           
            String email = EmailLTextField.getText();
            String password = PaswordLoginTextField.getText();
       
            //Check if fields are empty fields
            if((email.equals("")||password.equals("")))
        {
            JOptionPane.showMessageDialog(this, "Mandatory fields are empty Empty Fields");
            return false;
        }
             String emailRegex = "^(.+)@(.+)$";
            if (!email.matches(emailRegex)) {
                JOptionPane.showMessageDialog(this,"Email is not in a valid format");
                return false;
            }
        else
        {
            return true;
        }
    }
    
    
    
    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginButtonActionPerformed
       try {
            //Get the username and password
            String useremail = EmailLTextField.getText();
            String password = PaswordLoginTextField.getText();
            String user  =usertype.getSelectedItem().toString();
            
            
             Connection con = DB.getConnection();
             Statement stat = null;
           
            String logg = String.valueOf(logInTime);
            
     
          ResultSet userResultSet = UserTable.getloginemail(useremail);
            String sqll = "Select * from User where UserEmail= '" + EmailLTextField.getText() +"'";
            Statement pstt = con.createStatement();
            ResultSet rss = pstt.executeQuery(sqll);
           
            
            salt = rss.getString("salt");
            mySecurePassword=rss.getString("UserPassword");
           String sql = "Select * from User where UserEmail= '" + EmailLTextField.getText() +"' and UserPassword = '" + mySecurePassword + "'";
         
            Statement pst = con.createStatement();
            ResultSet rs = pst.executeQuery(sql);
            System.out.println("rs:" + " " + rs.getString(1));
            
            SignUpIn n = new SignUpIn();
            String s = rss.getString("UserType");
                
           String log = String.valueOf(logInTime);
         if (rs.next())  {
             pstt.close();
             
             rs.close();
             if(userResultSet.next()){
                
                 UserTable.insertULogin(EmailLTextField.getText(), log);
              userResultSet.close();
                  
              if(verifyLoginFields()==true){
                    //Check if password is correct
                    if(!n.verifyUserPassword(PaswordLoginTextField.getText(),mySecurePassword,salt)){
                        JOptionPane.showMessageDialog(this,"wrong pass"); 
                        
                        } else {
                        if(!s.equalsIgnoreCase("User")){
                          
                           //Check if the user is an admin or a normal user //this determines what form they progress to
                            //Progress to HomePage form
                            Adminpanel1 panel = new Adminpanel1();
                            panel.setVisible(true);
                            this.setVisible(false);
                            JOptionPane.showMessageDialog(this," welcome to admin panel" +  " " + useremail);
                            //Close Login form
                            this.dispose();
                        }
                        else {
                            //if the user is not admin they go straight to dashboard 1 to view
                            
                            Dashboard3 d = new Dashboard3();
                            d.setVisible(true);
                            this.setVisible(false);
                            JOptionPane.showMessageDialog(this,"welcome to dashboard 1" + useremail);
                            this.dispose();
                        }
                    }
              }
         }
             else
             {
//Error message
                 JOptionPane.showMessageDialog(this, "Invalid username/password","Login Error",2);
             }
           }
           con.close();
        } catch (SQLException ex) {
            //Logger.getLogger(SignUpIn.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,"login error");
        }     
    }//GEN-LAST:event_LoginButtonActionPerformed

    
    public boolean VerifyPassword(String providedpass) throws SQLException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, UnsupportedEncodingException, InvalidAlgorithmParameterException, BadPaddingException, IOException 
    {
        //This method verifiys the passsword by checking if the passwords match with password in the database
        boolean passwordMatch = SignUpIn.verifyUserPassword(providedpass, mySecurePassword, salt);
             if(passwordMatch) 
            {
                return true;
            } 
             else 
             {
                 return false;  
             }
    }
    
    private void PaswordLoginTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaswordLoginTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PaswordLoginTextFieldActionPerformed

    private void EmailSTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmailSTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EmailSTextFieldActionPerformed

    private void MemorableWordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MemorableWordTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MemorableWordTextFieldActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
       //method clears the  sign up fields
         UserNameTextField.setText(" ");
         EmailSTextField.setText(" ");
         PasswordSTextField.setText("");
         MemorableWordTextField.setText(" ");
    }//GEN-LAST:event_ClearActionPerformed

    private void ClearLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearLoginActionPerformed
       //Clears login fields
        EmailLTextField.setText(" ");
       PaswordLoginTextField.setText("");
    }//GEN-LAST:event_ClearLoginActionPerformed

    private void usertypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usertypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usertypeActionPerformed

    private void PasswordSTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordSTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordSTextFieldActionPerformed

    private void ForgotPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForgotPassActionPerformed
 
         //return users memorable word from database
        try {
             String useremail = EmailLTextField.getText();
            Connection con = DB.getConnection();
             Statement stat = null;
             
             String sqll = "Select * from User where UserEmail= '" + EmailLTextField.getText() +"'";
             Statement pstt = con.createStatement();
              ResultSet rss = pstt.executeQuery(sqll);
             String m = rss.getString("UserMemorable");
             JOptionPane.showMessageDialog(this,"Memorable word is:" + " " +  m); 
             
         } catch (SQLException ex) {
             Logger.getLogger(SignUpIn.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    }//GEN-LAST:event_ForgotPassActionPerformed

 
  
  
  
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SignUpIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SignUpIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SignUpIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SignUpIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SignUpIn().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JButton ClearLogin;
    private javax.swing.JTextField EmailLTextField;
    private javax.swing.JLabel EmailLogi;
    private javax.swing.JTextField EmailSTextField;
    private javax.swing.JButton ForgotPass;
    private javax.swing.JButton LoginButton;
    private javax.swing.JLabel MemorableW;
    private javax.swing.JTextField MemorableWordTextField;
    private javax.swing.JLabel PasswordLogi;
    private javax.swing.JPasswordField PasswordSTextField;
    private javax.swing.JPasswordField PaswordLoginTextField;
    private javax.swing.JButton SignUpButton;
    private javax.swing.JPanel SigninPanel;
    private javax.swing.JPanel SignupPanel;
    private javax.swing.JLabel UEmail;
    private javax.swing.JLabel UPassword;
    private javax.swing.JLabel UserN;
    private javax.swing.JTextField UserNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel user;
    private javax.swing.JComboBox<String> usertype;
    // End of variables declaration//GEN-END:variables

 
  
 
    
}
